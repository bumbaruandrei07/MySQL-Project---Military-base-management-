CREATE DATABASE IF NOT EXISTS Proiect_Bumbaru_Andrei;

USE Proiect_Bumbaru_Andrei;

CREATE TABLE IF NOT EXISTS persoane(
id TINYINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
nume VARCHAR(30) NOT NULL,
prenume VARCHAR(30) NOT NULL,
data_nastere DATE,
cnp CHAR(13) NOT NULL UNIQUE,
stare_civila ENUM('necasatorit','casatorit','divortat'),
salariu float,
ani_vechime tinyint,
nationalitate VARCHAR(30) NOT NULL default 'ROMANA',

FOREIGN KEY(id_unitate) REFERENCES unitate_militara(id),
FOREIGN KEY(id_pluton) REFERENCES pluton(id)
);

alter table soldati add  id_unitate tinyint;
alter table soldati add  id_pluton tinyint;
# MODIFICAREA NUMELUI UNEI TABELE
alter table persoane rename to soldati;
DESCRIBE soldati;

CREATE TABLE IF NOT EXISTS arme(
id tinyint not null primary key auto_increment,
nume_arma VARCHAR(40) NOT NULL,
munitie TINYINT,
pret float,
id_arma tinyint,
FOREIGN KEY(id_arma) REFERENCES soldati(id));

CREATE TABLE IF NOT EXISTS unitate_militara(
id tinyint not null primary key auto_increment,
nume_unitate varchar(40) NOT NULL,
capacitate tinyint,
comandant varchar(30) not null);

CREATE TABLE IF NOT EXISTS pluton(
id tinyint not null primary key auto_increment,
nume_pluton varchar(40) not null,
numar_soldati tinyint,
numar_misiuni_indeplinite tinyint);

#ADAUGAREA UNEI COLOANE IN TABELA
alter table pluton add numar_misiuni_esuate tinyint;
describe pluton;

#STERGEREA UNEI COLOANE

alter table soldati drop nationalitate;
alter table pluton drop numar_misiuni_esuate;

#REDENUMIRE TABELA PRIN AMBELE METODE

alter table soldati RENAME TO Soldati;
describe Soldati;
RENAME TABLE Soldati to soldati;
describe soldati;

#eliminare primary key din tabela - folosim cei 2 pasi:

alter table arme change id id tinyint not null;
alter table arme drop primary key;
describe arme;

#modificarea unei coloane existente din tabela
alter table soldati change prenume nr_telefon VARCHAR(30) not null;
describe soldati;

#adaugare foreign key
alter table arme add foreign key(id_arma) references soldati(id);
alter table soldati add foreign key(id_unitate) references unitate_militara(id);
alter table soldati add foreign key(id_pluton) references pluton(id);

#creare index
create index nume_unitate_index on unitate_militara(nume_unitate);
#stergere index
drop index nume_unitate_index on unitate_militara;

drop table persoane;
describe soldati;

describe arme;
describe unitate_militara;
describe pluton;
alter table soldati drop data_nastere;
alter table soldati drop stare_civila;
alter table soldati drop cnp;
alter table soldati add salariu float;
alter table soldati add ani_vechime tinyint;

INSERT INTO soldati values(NULL, 'POPESCU', '0761345987',NULL,NULL, 2000, 20); 
INSERT INTO soldati values(NULL, 'IONESCU', '0764345937',NULL,NULL, 3400, 4); 
INSERT INTO soldati values(NULL, 'GEORGESCU', '0763341987',NULL,NULL, 1012, 10); 
INSERT INTO soldati values(NULL, 'AVRAMESCU', '0763125987',NULL,NULL, 6644, 5); 
INSERT INTO soldati values(NULL, 'BARBULESCU', '0765345987',NULL,NULL, 5100, 5); 
INSERT INTO soldati values(NULL, 'MIHAILESCU', '0763345987',NULL,NULL, 5100, 6); 
INSERT INTO soldati values(NULL, 'UNGUREANU', '0762345987',NULL,NULL, 1050, 7); 
INSERT INTO soldati values(NULL, 'MATEIESCU', '0768375987',NULL,NULL, 4050, 5); 
INSERT INTO soldati values(NULL, 'MARINESCU', '0761641987',NULL,NULL, 1300, 6); 
INSERT INTO soldati values(NULL, 'NICULESCU', '0765342887',NULL,NULL, 4020, 15); 

select * from soldati;

INSERT INTO arme VALUES(10, 'LUNETA',100,50000,NULL);
INSERT INTO arme VALUES(11, 'lansator',1000,15000,NULL);
INSERT INTO arme VALUES(12, 'SHOTGUN',100,25000,NULL);
INSERT INTO arme VALUES(13, 'BAZOOKA',100,35000,NULL);
INSERT INTO arme VALUES(14, 'PISTOL',100,2000,NULL);
INSERT INTO arme VALUES(15, 'AZ-JK',100,34000,NULL);
INSERT INTO arme VALUES(16, 'RT-PK',100,45000,NULL);
INSERT INTO arme VALUES(17, 'BRPL',100,65000,NULL);
INSERT INTO arme VALUES(18, 'LSQW',100,76000,NULL);
INSERT INTO arme VALUES(19, 'CRWS',100,23700,NULL);

select * from arme;

INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA A',100,'Averescu');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA B',150,'Mihai');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA C',12,'Andrei');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA D',54,'Ion');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA E',23,'George');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA F',56,'Florin');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA G',65,'Anghel');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA H',75,'Constantin');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA I',23,'Stefan');
INSERT INTO unitate_militara VALUES(NULL, 'UNITATEA J',32,'Raul');

select *from unitate_militara;

INSERT INTO pluton VALUES(NULL,'PLUTONUL ALFA', 50,10);
INSERT INTO pluton VALUES(NULL,'PLUTONUL BETA', 20,12);
INSERT INTO pluton VALUES(NULL,'PLUTONUL OMEGA', 30,15);
INSERT INTO pluton VALUES(NULL,'PLUTONUL NEINFRICAT', 40,4);
INSERT INTO pluton VALUES(NULL,'PLUTONUL IV', 10,5);
INSERT INTO pluton VALUES(NULL,'PLUTONUL V', 15,7);
INSERT INTO pluton VALUES(NULL,'PLUTONUL XII', 25,8);
INSERT INTO pluton VALUES(NULL,'PLUTONUL VII', 46,9);
INSERT INTO pluton VALUES(NULL,'PLUTONUL VIII', 12,11);
INSERT INTO pluton VALUES(NULL,'PLUTONUL IX', 35,3);

select * from pluton;

set sql_safe_updates =0;
UPDATE pluton set numar_soldati=49 where nume_pluton='Plutonul BETA';

select * from pluton;
select * from arme;
set sql_safe_updates =0;
UPDATE arme set nume_arma='Luneta' where pret=5000;

select * from soldati;
set sql_safe_updates =0;
UPDATE arme set nume_arma='Luneta' where pret=5000;

set sql_safe_updates =0;
UPDATE soldati set salariu=3500 where ani_vechime > 4 AND id between 3 and 5;
 
 #se va majora salariul cu 25% pentru acei soldati care au o vechime de peste 5 ani
 set sql_safe_updates=0;
 UPDATE soldati set salariu=salariu*2.5 WHERE ani_vechime >5;
 
#sa se sterga plutonul care are cel mult 4 misiuni indeplinite

delete from pluton where numar_misiuni_indeplinite <= 4;

#sa se stearga arma care are id-ul egal cu 11

delete from arme where id=11;

#sa se sterga unitatea militara ca are o capacitate mai mica de 20
delete from unitate_militara where capacitate<20;

#sa se afiseze soldatii al caror nume incepe cu litera M

SELECT  * from soldati where nume LIKE"M%";

#Sa se ordoneze soldatii dupa salariu in mod crescator
SELECT * FROM soldati ORDER BY(salariu) ASC;

#Sa se ordoneze armele in ordine alfabetica dupa nume
Select nume_arma, pret from arme order by(nume_arma) ASC;

#Sa se afiseze plutonul cu cele mai multe misiuni indeplinite

SELECT * FROM pluton ORDER BY(numar_misiuni_indeplinite) DESC LIMIT 1;

#sa se afiseze armele care au un pret de peste 20000 si sunt SHOTGUN sau BAZOOKA

SELECT * FROM arme WHERE pret > 20000 AND(nume_arma = 'SHOTGUN' OR nume_arma = 'BAZOOKA');

# Sarim peste cea mai mare unitate militara (sa nu se afiseze) dar sa se afiseze urmatoarele 4 

SELECT * FROM unitate_militara ORDER BY capacitate DESC LIMIT 1, 4;

#Sa se afiseze soldatii care au o vechime cuprinsa intre 5 si 10 ani
SELECT * FROM soldati WHERE ani_vechime >=5 AND ani_vechime<=10;

#Sa se afiseze armele care au pretul mai mic decat 6000 sau armele care au pretul mai mare decat 60000:

SELECT * FROM arme WHERE pret<6000 OR pret>60000;


#Sa se afiseze cate arme au pretul mai mare de 10000 si cate nu au pretul mai mare decat 10000
SELECT COUNT(*), nume_arma, pret FROM arme WHERE pret>10000  group by pret;


#sa se afiseze media pentru acele plutoane care au o medie a misiunilor indeplinite mai mica de 10 misiuni:

SELECT AVG(numar_misiuni_indeplinite), nume_pluton from pluton GROUP BY nume_pluton HAVING AVG(numar_misiuni_indeplinite) <10;

#sa se afiseze soldatii care au media anilor de vechime mai mare decat 8 ani:

SELECT AVG(ani_vechime), nume from soldati group by nume HAVING AVG(ani_vechime) >8;

#utilizarea functiei GROUP_CONCAT:

SELECT munitie, pret, GROUP_CONCAT(nume_arma SEPARATOR ',') FROM arme GROUP BY pret;
SELECT ani_vechime, salariu, GROUP_CONCAT(nume SEPARATOR ',') FROM soldati GROUP BY salariu;


#utilizarea functiilor calendaristice:

SELECT CURDATE(), current_time(), current_date(), now(), CURTIME();

#operatii calendaristice

SELECT date_add(curdate(),interval 2 week);
SELECT date_sub(curdate(), interval 1 MONTH);
SELECT date_sub(now(), INTERVAL 2 HOUR);
SELECT date_add(now(), interval 4 HOUR);

#CROSS JOIN

select * from soldati;
select * from unitate_militara;
SELECT nume, salariu from soldati CROSS JOIN unitate_militara;


#inner join
SELECT nume_pluton from pluton, soldati WHERE pluton.id=soldati.id_pluton;

SELECT nume_unitate, capacitate, comandant FROM unitate_militara, pluton, soldati WHERE unitate_militara.id=soldati.id_unitate AND pluton.id = soldati.id_pluton;

#LEFT JOIN

SELECT nume_unitate, comandant from unitate_militara LEFT JOIN soldati
ON unitate_militara.id=soldati.id_unitate;

#RIGHT JOIN

select nume_unitate, comandant from unitate_militara RIGHT JOIN soldati
ON unitate_militara.id = soldati.id_unitate;

select * from pluton;

#subinterogari

#1.Sa se afiseze soldatii cu salariul mai mare decat salariul mediu: 

SELECT * FROM soldati where salariu >(select avg(salariu) as salariu_mediu from soldati);

#2. Sa se determine plutonul cu al doilea cel mai mare numar de soldati:

#pas 1:
select max(numar_soldati) from pluton;

#pas 2:

select numar_soldati from pluton where numar_soldati <(select max(numar_soldati) from pluton);

#pas 3:

select * from pluton where numar_soldati=(select max(numar_soldati) from pluton where numar_soldati<(select max(numar_soldati)from pluton));

#3. Sa se afiseze armele care au costat mai putin decat media:

SELECT * FROM arme where pret <(select avg(pret) as average_price from arme);

select * from soldati;
#tabele virtuale(view-uri)

# view 1:
create or replace view v_soldati_1 
as select * from soldati
where id = 3;
update v_soldati_1 set nume = 'Gavrilescu';
select * from v_soldati_1 ;

# view 2:

create or replace view detalii_soldat as select nume, salariu, ani_vechime from soldati, pluton
where pluton.id=soldati.id_pluton;
select * from detalii_soldat;


CREATE TABLE catalog_vacante_soldati(
id_catalog_vacante INT(14) NOT NULL PRIMARY KEY auto_increment,
destinatie varchar(200),
pret double(7,2),
tip varchar(100),
durata int(2));

CREATE TABLE rezervare(
id_rezervare INT(14) NOT NULL PRIMARY KEY AUTO_INCREMENT,
calator varchar(50),
nr_calatori int(20),
data_rezervare date,
id_catalog_vacante int(14),
FOREIGN KEY(id_catalog_vacante) references catalog_vacante_soldati(id_catalog_vacante));

INSERT INTO catalog_vacante VALUES (NULL, 'New York', 1500,'sejur',7),
								   (NULL, 'Varsovia',1300,'sejur', 4),
                                   (NULL, 'Atena', 900, 'citybreak',3),
                                   (NULL, 'Austria',1900,'circuit',8),
                                   (NULL,'Manchester',2000,'sejur',7);
select * from catalog_vacante;

INSERT INTO rezervare values 
(NULL, 'Ivanescu',6,20190715,2),
(NULL, 'Leonardo',2,20190810,3),
(NULL,'Horia',3,20180916,4),
(NULL,'Iorgulescu',7,20190507,2),
(NULL,'Frederick',9,20190609,3),
(NULL,'Marin',5,20191011,4);
select * from rezervare;

alter table catalog_vacante rename to catalog_vacante_soldati;
#PROCEDURI:
#1. Sa se realizeze o procedura pentru determinarea numarului de vacante. Sa se apeleze procedura.

DELIMITER //
CREATE PROCEDURE afisareNrVacante()
BEGIN
select COUNT(id_catalog_vacante) FROM catalog_vacante;
end;
//
DELIMITER ;
CALL afisareNrVacante;

#2. Sa se realizeze o procedura care determina cate vacante sunt de un anumit tip

DELIMITER //
CREATE PROCEDURE afisareNrOferteDeVacanta(in tipVacanta VARCHAR(100))
BEGIN
SELECT COUNT(id_catalog_vacante) FROM catalog_vacante_soldati WHERE tip=tipVacanta;
END;
//
DELIMITER ;
CALL afisareNrOferteDeVacanta('sejur');
call afisareNrOferteDeVacanta('citybreak');

#3. Sa se calculeze valoarea unei rezervari ce primeste id-ul de rezervare ca parametru de intrare si 
#furnizeaza valoarea rezervarii (pret*nr_calatori) printr-un parametru de iesire)

DELIMITER //
CREATE PROCEDURE calculValoareRezervare(in idRezervare INT, out valoare DOUBLE(7,2))
BEGIN
select j.pret * k.nr_calatori INTO valoare
FROM catalog_vacante_soldati AS j INNER JOIN rezervare AS k
on j.id_catalog_vacante =k.id_catalog_vacante
WHERE k.id_rezervare=idRezervare;
END;
//
DELIMITER ;

CALL calculValoareRezervare(2, @x);
SELECT @x;

CALL calculValoareRezervare(1,@y);
select @y;

#Functii:

#1. Sa se realizeze o functie care sa numere cate rezervari exista pentru fiecare destinatie in parte:

DELIMITER //

CREATE function nrRezervariDestinatieVACANTA(destinatieVacanta VARCHAR(200)) RETURNS int
BEGIN

DECLARE nr int DEFAULT 0;
SELECT COUNT(id_rezervare) INTO nr
FROM rezervare AS rez, catalog_vacante_soldati AS vac
WHERE vac.id_catalog_vacante= rez.id_catalog_vacante 
AND vac.destinatie = destinatieVacanta;
RETURN nr;


END;
// 
DELIMITER ;
#apelul functiei:
SELECT nrRezervariDestinatieVACANTA('Varsovia');
SELECT nrRezervariDestinatieVACANTA('Atena');
SELECT nrRezervariDestinatieVACANTA('New York');

#2. Sa se realizeze o functie care primeste ca parametru un id de vacanta si un nivel maxim pentru care
#oferta sa fie acceptata

DELIMITER //
CREATE FUNCTION decizie_Vacanta(idVacanta int, nivel int) RETURNS varchar(100)
BEGIN
DECLARE decizie varchar(100);
DECLARE pretVacanta double(7,2);

SELECT pret INTO pretVacanta FROM catalog_vacante_soldati WHERE id_catalog_vacante = idVacanta;
IF pretVacanta < nivel THEN 
SET decizie := 'Decizia este pentru acceptarea pachetului de vacanta!';
ELSE 
SET decizie := 'Decizia este pentru refuzarea pachetului de vacanta!';
END IF;
RETURN decizie;
 END;
 // 
 DELIMITER ;

SELECT decizie_Vacanta(4, 3000);
SELECT decizie_Vacanta(3,4000);

#3. Sa se construiasca o functie care determina ziua dintr-o luna in care s-a realizat rezervarea vacantei:

DELIMITER //
CREATE FUNCTION ziua_STABILIRII_VACANTEI(idRezervare int) RETURNS VARCHAR(40)
BEGIN
DECLARE zi VARCHAR(40);
DECLARE indexZI INT;
DECLARE dataRezervare DATE;

SELECT data_rezervare INTO dataRezervare FROM rezervare WHERE id_rezervare = idRezervare;
SELECT dayofmonth(dataRezervare) INTO indexZI;
CASE indexZi
when 1 then set zi :='sunday';
when 2 then set zi :='monday';
when 3 then set zi:='tuesday';
when 4 then set zi:='wednesday';
when 5 then set zi:='thursday';
when 6 then set zi:='friday';
when 7 then set zi:='saturday';
when 8 then set zi :='2nd sunday';
when 9 then set zi :='2ND monday';
when 10 then set zi:='2ND tuesday';
when 11 then set zi:='2nd wednesday';
when 12 then set zi:='2nd thursday';
when 13 then set zi:='2nd friday';
when 14 then set zi:='2nd saturday';
when 15 then set zi:='3rd sunday';
when 16 then set zi:='3rd monday';
when 17 then set zi:='3rd tuesday';
when 18 then set zi:='3rd wednesday';
when 19 then set zi:='3rd thursday';
when 20 then set zi:='3rd friday';
when 21 then set zi:='3rd saturday';
when 22 then set zi:='4th sunday';
when 23 then set zi:='4th monday';
when 24 then set zi:='4th tuesday';
when 25 then set zi:='4th wednesday';
when 26 then set zi :='4th thursday';
when 27 then set zi:='4th friday';
when 28 then set zi:='4th saturday';
else set zi :='nu exista oferta pentru alta zi';
END CASE;
RETURN zi;

END;
//
DELIMITER ;

SELECT ziua_STABILIRII_VACANTEI(3);
select ziua_STABILIRII_VACANTEI(5);
select ziua_STABILIRII_VACANTEI(6);
select ziua_STABILIRII_VACANTEI(30);


CREATE TABLE IF NOT exists bilete_tren_soldati(
ID TINYINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
oras_plecare varchar(100) not null,
oras_destinatie VARCHAR(100) not null,
data_plecare DATE not null,
data_intoarcere DATE not null,
pret float(7,2) not null,
discount tinyint not null);
alter table bilete_tren_soldati rename to bilete_tren_soldati_romani;

INSERT INTO bilete_tren_soldati_romani values
(NULL, 'Salonic','Bucuresti','2019-07-10','2019-07-20',300,0),
(NULL,'Liege','Craiova','2019-07-09','2019-07-25',450,10),
(NULL,'Bucuresti','Jakarta','2019-10-11','2019-10-21',1000,20),
(NULL,'Bucuresti','Cairo','2020-01-10','2020-01-25',1300,10),
(NULL,'Bucuresti','Madrid','2019-12-12','2019-12-20',1100,15);

Select * from bilete_tren_soldati_romani;

CREATE TABLE IF NOT EXISTS bilete_vechi_tren_soldati_romani
(
ID TINYINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
oras_plecare varchar(200) not null,
oras_destinatie varchar(100) not null,
data_plecare date not null,
data_intoarcere date not null);



#1. Sa se realizeze o procedura cu un cursor care sa insereze in tabela bilete_vechi_soldati_romani
#calatoriile din trecut

DELIMITER //
CREATE PROCEDURE afisare_calatorii_trecute()
BEGIN
DECLARE v_oras_plecare varchar(200);
DECLARE v_oras_destinatie varchar(200);
declare v_data_plecare DATE;
DECLARE v_data_intoarcere date;
DECLARE v_semafor VARCHAR(10) DEFAULT 'green';
DECLARE c cursor for SELECT oras_plecare, oras_destinatie, data_plecare, data_intoarcere
from bilete_tren_soldati_romani WHERE data_intoarcere < curdate();

DECLARE CONTINUE HANDLER FOR NOT FOUND
BEGIN
SET v_semafor ='red';
END;
OPEN c;
bilete_vechi_tren_soldati_romani:LOOP
FETCH c INTO v_oras_plecare, v_oras_destinatie, v_data_plecare, v_data_intoarcere;
IF v_semafor = 'red' THEN 
LEAVE bilete_vechi_tren_soldati_romani;
else INSERT INTO bilete_vechi_tren_soldati_romani VALUES(NULL, v_oras_plecare, v_oras_destinatie, v_data_plecare, v_data_intoarcere);
END IF;
END LOOP;
CLOSE c;



END;
//
DELIMITER ;

call afisare_calatorii_trecute();
SELECT * FROM bilete_vechi_tren_soldati_romani;


#2. Sa se creeze o procedura care sa afiseze soldatii novice, soldatii novice fiind acei soldati care au 
# putini ani vechime si un salariu mic.
DELIMITER //
CREATE PROCEDURE gaseste_soldati_novice(salariu_maxim FLOAT(7,2), minimul_ani_vechime tinyint)
BEGIN


DECLARE v_nume VARCHAR(50);
DECLARE v_salariu float(5,2);
DECLARE v_ani_vechime tinyint;
DECLARE soldat_novice varchar(400);
declare rezultat varchar(400);
DECLARE v_semafor varchar(10) DEFAULT 'verde';
DECLARE c CURSOR FOR SELECT nume, salariu, ani_vechime from
soldati where salariu < salariu_maxim;

DECLARE CONTINUE HANDLER FOR NOT FOUND
BEGIN
set v_semafor ='rosu';
END;
OPEN c;
gaseste_soldati:LOOP
FETCH c INTO v_nume, v_salariu, v_ani_vechime;
IF v_semafor ='rosu' THEN LEAVE gaseste_soldati;
else if v_ani_vechime < minimul_ani_vechime then
SET soldat_novice = concat(v_nume, '-' , v_ani_vechime);
SET rezultat = concat(soldat_novice, ';' , rezultat);
END IF;
END IF;
END LOOP;
SELECT rezultat;
CLOSE c;
 END;
//
DELIMITER ; 
CALL gaseste_soldati_novice(5000,4);


select * from pluton;
#3. Sa se creeze o procedura ca sa determine cele mai slabe plutaone in functie de misiunile indeplinite

DELIMITER //
CREATE PROCEDURE gaseste_pluton_slab(nr_maxim_soldati FLOAT(7,2), minimul_misiuni_realizate tinyint)
BEGIN


DECLARE v_nume_pluton VARCHAR(50);
DECLARE v_numar_soldati tinyint;
DECLARE v_numar_misiuni_realizate tinyint;
DECLARE pluton_slab varchar(400);
declare rezultat varchar(400);
DECLARE v_semafor varchar(10) DEFAULT 'verde';
DECLARE c CURSOR FOR SELECT nume_pluton, numar_soldati, numar_misiuni_realizate from
pluton where numar_soldati < nr_maxim_soldati;

DECLARE CONTINUE HANDLER FOR NOT FOUND
BEGIN
set v_semafor ='rosu';
END;
OPEN c;
gaseste_pluton_slab:LOOP
FETCH c INTO v_nume_pluton, v_numar_soldati, v_numar_misiuni_realizate;
IF v_semafor ='rosu' THEN LEAVE gaseste_pluton_slab;
else if v_numar_misiuni_realizate < minimul_misiuni_realizate then
SET pluton_slab = concat(v_nume_pluton, '-' , v_numar_misiuni_indeplinite);
SET rezultat = concat(pluton_slab, ';' , rezultat);
END IF;
END IF;
END LOOP;
SELECT rezultat;
CLOSE c;
 END;
//
DELIMITER ; 
CALL gaseste_pluton_slab(20,10);


#TRIGGERI

CREATE TABLE IF NOT EXISTS audit_soldati
(
id tinyint not null primary key auto_increment,
id_soldat tinyint not null,
user varchar(40) not null,
data_modificare DATE NOT NULL,
detalii varchar(200) not null,
foreign key(id_soldat) references soldati(id));



#1.Sa se construiasca un trigger care se declanseaza dupa fiecare adaugare de un nou soldat

DELIMITER //
CREATE TRIGGER after_soldati_insert AFTER INSERT ON soldati
for each row
begin
INSERT INTO audit_soldati VALUES (NULL, NEW.id, user(), curdate(),
concat('Soldat nou: ' ,  New.nume));
END;
//
DELIMITER ;
INSERT INTO soldati values(NULL, 'TOMESCU', '0763465987',NULL,NULL, 3000, 9);
SELECT * FROM soldati;
#DROP TRIGGER after_soldati_insert;


#2. Sa se construiasca un trigger care se declanseaza inante de fiecare adaugare a unui nou soldat
DELIMITER //
CREATE TRIGGER before_soldati_insert BEFORE INSERT ON soldati
FOR EACH ROW
BEGIN

SET NEW.nume = upper(trim(NEW.nume));
IF NEW.salariu < 1000 THEN 
SET new.salariu = 1000;
END IF;

IF new.ani_vechime<1 THEN
SET new.ani_vechime=1;
END IF;
END;
//
DELIMITER ;
INSERT INTO soldati VALUES(NULL, 'Lucian','0712465287',NULL,NULL, 400, 0);
select*from soldati;

#3. Sa se construiasca un trigger care se declanseaza dupa fiecare adaugare
# si schimbasalariul sau de nume acolo unde salariul este modificat

DELIMITER //
CREATE TRIGGER after_soldati_update AFTER UPDATE ON soldati
FOR EACH ROW
BEGIN
IF OLD.nume != NEW.nume THEN
INSERT INTO audit_soldati values
(NULL, NEW.id, user(), CURDATE(), concat('Schimbare de nume: de la', OLD.nume, 'la', NEW.nume));
END IF;
IF OLD.salariu != NEW.salariu THEN
INSERT INTO audit_soldati VALUES(NULL, NEW.id, user(), curdate(), concat('Schimbare de salariu:', NEW.salariu - OLD.salariu, 'LEI'));
END IF;
END;
//
DELIMITER ;

UPDATE soldati SET nume = 'Diaconu', salariu = 4000 WHERE id = 4;
SELECT * FROM soldati;


